<?php
/**
 * Created by PhpStorm.
 * User: hdo
 * Date: 4/10/2019
 * Time: 3:57 PM
 */

class Registration_AjaxController extends Core_Controller_Front_Action
{
    protected $_isSuccess;

    function _construct()
    {
        parent::_construct(); // TODO: Change the autogenerated stub
        $this->_isSuccess = false;
    }

    /**
     * Index action
     */
    public function indexAction()
    {
        if (!empty($_SERVER['HTTP_X_REQUESTED_WITH']) && strtolower($_SERVER['HTTP_X_REQUESTED_WITH']) === 'xmlhttprequest') {
            $isAjax = Virtual::app()->getRequest()->isAjax();
            if ($isAjax) {
                $params = Virtual::app()->getRequest()->getParams();
                $errorMsg = 'We are encountering some technical issues, please try again!';
                $results = '';

                if (is_array($params) && sizeof($params) > 0) {
                    //Ready to submit all fields
                    if (isset($params['fieldToSubmit']) && isset($params['readyToSubmit'])) {
                        $fieldToSubmit = $this->_getHelper()->jsonDecode($params['fieldToSubmit'], TRUE);
                        $isMailSent = $this->_getCreateAccountModel()->createProfile($fieldToSubmit)->isMailSent();

                        $results = array(
                            'success' => $isMailSent,
                            'error'   => $isMailSent ? '' : $errorMsg,
                            'forward' => $this->_getForwardUrl($isMailSent)
                        );
                    }
                    //Validate individual field
                    else if (isset($params['fieldName'])) {
                        $fieldKey = trim($params['fieldName']);
                        if ( !isset($params[$fieldKey]) || $params[$fieldKey] == '' ) {
                            $results = array('fieldErrors' =>
                                array($fieldKey => [Registration_Model_Createaccount::FIELD_ARRAY[$fieldKey] . " is a require entry."])
                            );
                        }
                        else {
                            switch ($fieldKey) {
                               case 'tuserName':
                                   $userName = trim($params['tuserName']);
                                   if( $this->_getCreateAccountModel()->isUserNameExist($userName) ) {
                                       $results = array(
                                           'rs'                => "alternate",
                                           'alternateNameList' => $this->_getCreateAccountModel()->generateUsernameSuggestList($userName),
                                           'fieldErrors'       => array(
                                               $fieldKey => [" Looks like that name is already in use."],
                                           )
                                       );
                                   }
                                   else {
                                       $results = array('rs' => "success");
                                   }

                                   break;

                               case 'tPassword':
                                   $password = trim($params['tPassword']);
                                   $errorMsg = $this->_getCreateAccountModel()->evaluatePassword($password);
                                   $results = array(
                                       'rs' => ($errorMsg == '') ? "success" : "failed"
                                   );
                                   if( $errorMsg != '' ) {
                                       $results = array( 'fieldErrors'  => array( $fieldKey => [$errorMsg] ) );
                                   }

                                   break;

                               case 'temail' :
                                   $tEmail = trim($params['temail']);
                                   $errorMsg = $this->_getCreateAccountModel()->isValidEmail($tEmail);
                                   $results = array(
                                       'rs' => ($errorMsg == '') ? "success" : "failed",
                                       'successMsg' => 'Email is valid, but need verification.'
                                   );
                                   if( $errorMsg != '' ) {
                                       $results = array( 'fieldErrors'  => array( $fieldKey => [$errorMsg] ) );
                                   }

                                   break;
                           }//switch
                        }
                    }
                }//if

                echo Virtual::helper('core')->jsonEncode($results);
            }//if ajax
        }//If refer
        else {
            $this->_getLoginSession()->destroyUserSession();
            $this->_redirectUrl(Virtual::getBaseUrl());
        }
    }

    /**
     * @param $isMailSent
     * @return string
     * @throws Zend_Controller_Request_Exception
     * @throws Zend_Controller_Response_Exception
     */
    private function _getForwardUrl($isMailSent)
    {
        return $isMailSent ? (Virtual::getBaseUrl()).DS.'registration'.DS.'confirm' : '';
    }

    /**
     * @return Registration_Model_Createaccount
     * @throws Exception
     */
    private function _getCreateAccountModel()
    {
        return Virtual::getModel('registration/createaccount');
    }

    /**
     * @return Core_Helper_Data|null
     */
    private function _getHelper()
    {
        return Virtual::helper('core');
    }

    /**
     * @return Login_Model_Session
     * @throws Exception
     */
    protected function _getLoginSession()
    {
        return Virtual::getSingleton('login/session');
    }

}//End of class